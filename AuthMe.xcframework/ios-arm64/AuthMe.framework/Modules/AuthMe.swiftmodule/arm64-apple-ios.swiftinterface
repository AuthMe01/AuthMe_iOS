// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AuthMe
import Algo
@_exported import AuthMe
import CoreGraphics/*.CGFloat*/
import CoreGraphics/*.CGSize*/
import CoreMotion
import CryptoKit
import Foundation
import MobileCoreServices
import Security
import Swift
import UIKit.UIImage
import UIKit
import UIKit/*.UIEdgeInsets*/
import UIKit/*.UIImage*/
import Vision
import _Concurrency
public class AbstractOCRFlow {
  public init(ocrcard: OCRCard)
  public func restart()
  @objc deinit
}
public enum MotionCondiction {
  case none
  case pass
  case vertical
  case horizontal
  public static func == (a: MotionCondiction, b: MotionCondiction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.Array where Element : Swift.Equatable {
  public mutating func mergeElements<C>(newElements: C) where Element == C.Element, C : Swift.Collection
}
public struct AuthMeConfig {
  public static var `default`: AuthMeConfig {
    get
  }
  public var activateCertificate: Swift.String
  public var activateToken: Swift.String
  public var serverURL: Foundation.URL
  public var sslCredentials: [AuthMeConfig.SSLCredential]?
  public struct SSLCredential {
    public let host: Swift.String
    public let credentialURL: Foundation.URL
    public init(host: Swift.String, credentialURL: Foundation.URL)
  }
}
@_hasMissingDesignatedInitializers public class AuthMe {
  public typealias Config = AuthMeConfig
  public static var initialized: Swift.Bool {
    get
  }
  public static var config: AuthMeConfig {
    get
  }
  public static var version: Swift.String {
    get
  }
  public static func configure(_ config: AuthMeConfig)
  public static func replace(accessToken: Swift.String) throws
  public static func initialize(accessToken: Swift.String) -> Swift.Result<Swift.Void, Swift.Error>
  public static func personalInfo(consent: Swift.Bool, url: Swift.String, completion: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
  public static func verificationState(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  @objc deinit
}
public struct LogFAS {
  public enum LogStage {
    case Passive
    case OpenMouth
    case CloseMouth
    case Smile
    case Scale
    case Done
    public static func == (a: LogFAS.LogStage, b: LogFAS.LogStage) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum LogFASResult {
    case Failed
    case NoFace
    case FaceNotAtCenter
    case FaceTooSmall
    case FaceTooLarge
    case NeedFaceToCamera
    case FaceMasked
    case NeedOpenMouth
    case NeedCloseMouth
    case NeedSmile
    case NeedOpenEyes
    case NeedMoreFrame
    case Error
    case Pass
    public static func == (a: LogFAS.LogFASResult, b: LogFAS.LogFASResult) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let logStage: LogFAS.LogStage
  public let logFASResult: LogFAS.LogFASResult
  public init(logStage: LogFAS.LogStage, logFASResult: LogFAS.LogFASResult)
}
public struct LogUpload {
  public enum Event {
    case start
    case end
    public static func == (a: LogUpload.Event, b: LogUpload.Event) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let duration: Swift.String
  public let event: LogUpload.Event
  public let frameNo: Swift.String
  public init(duration: Swift.String = "0", event: LogUpload.Event, frameNo: Swift.String)
}
public protocol LivenessFlowDelegate : AnyObject {
  func livenessDidStart()
  func livenessDidNotifyMessage(message: Swift.String)
  func livenessDidUpdateReconize(result: Swift.Bool)
  func livenessDidFailureWith(error: FlowError, retryHandler: @escaping (() -> Swift.Void))
  func livenessDidRecognize(image: UIKit.UIImage)
  func livenessDidFaceScale(direction: LivenessFlow.FaceScaleDirection.Direction)
  func livenessNotifyStage(log: LogFAS)
  func livenessNotifyUpload(log: LogUpload)
}
public class LivenessFlow : LivenessFlowProtocol {
  public func setDelegate(_ delegate: LivenessFlowDelegate)
  weak public var delegate: LivenessFlowDelegate?
  public var isDetecting: Swift.Bool {
    get
  }
  public init(action: Action = .register(waitResult: true))
  @objc deinit
  public func checkModel(progressHandler: ((Swift.Double) -> Swift.Void)? = nil, handler: ((Swift.Result<Swift.Void, FlowError>) -> Swift.Void)?)
  public func setPreviewSize(previewSize: CoreGraphics.CGSize)
  public func start(encrypt: Swift.Bool)
  public func recognize(image: UIKit.UIImage)
  public func recognize(normal normalImage: UIKit.UIImage, depthImage: UIKit.UIImage)
  public func roiRect(in previewSize: CoreGraphics.CGSize) -> CoreGraphics.CGRect
  public func cancelExpired()
  public func getResult(completion: @escaping ((Swift.Bool) -> Swift.Void))
  public func isExpired() -> Swift.Bool
  public func getVerifyResult(completion: @escaping ((Swift.Bool) -> Swift.Void))
  public func enableUploadFullFrame()
}
extension LivenessFlow {
  public struct RoiParam {
    public init(preview: EnginePreview, ratio: CoreGraphics.CGFloat, widthRatio: CoreGraphics.CGFloat, offset: UIKit.UIOffset)
  }
  public struct FaceScaleDirection {
    public enum Direction {
      case small
      case normal
      public static func == (a: LivenessFlow.FaceScaleDirection.Direction, b: LivenessFlow.FaceScaleDirection.Direction) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
}
public protocol Cancellable : AnyObject {
  var isCancelled: Swift.Bool { get }
  func cancel()
}
extension CoreGraphics.CGRect {
  public var center: CoreGraphics.CGPoint {
    get
  }
}
extension CoreGraphics.CGRect {
  public init(center: CoreGraphics.CGPoint, size: CoreGraphics.CGSize)
}
extension CoreGraphics.CGRect {
  public func resizing(to size: CoreGraphics.CGSize, anchor: CoreGraphics.CGPoint = CGPoint(x: 0.5, y: 0.5)) -> CoreGraphics.CGRect
}
extension Swift.Collection {
  public subscript(safe index: Self.Index) -> Self.Element? {
    get
  }
  public func group(by size: Swift.Int) -> [[Self.Element]]?
}
extension Swift.Collection where Self.Element : Swift.BinaryInteger {
  public func average() -> Swift.Double
}
extension Swift.Collection where Self.Element : Swift.FloatingPoint {
  public func average() -> Self.Element
}
extension Swift.Dictionary {
  public mutating func removeAll<S>(keys: S) where Key == S.Element, S : Swift.Sequence
  public func has(key: Key) -> Swift.Bool
  public static func + (lhs: [Key : Value], rhs: [Key : Value]) -> [Key : Value]
  public static func += (lhs: inout [Key : Value], rhs: [Key : Value])
  public static func - <S>(lhs: [Key : Value], keys: S) -> [Key : Value] where Key == S.Element, S : Swift.Sequence
  public static func -= <S>(lhs: inout [Key : Value], keys: S) where Key == S.Element, S : Swift.Sequence
}
public struct EnginePreview {
  public init(imageSize: CoreGraphics.CGSize, previewSize: CoreGraphics.CGSize, previewInsets: UIKit.UIEdgeInsets = .zero)
}
public struct ErrorDescription : Foundation.LocalizedError, Swift.Equatable {
  public init(description: Swift.String)
  public var localizedDescription: Swift.String {
    get
  }
  public static func == (a: ErrorDescription, b: ErrorDescription) -> Swift.Bool
}
extension ErrorDescription : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
public struct StatusCodeError : Swift.Error {
  public let localizedDescription: Swift.String
}
public func decode(jwt: Swift.String) throws -> JWT
public struct Claim {
  public var rawValue: Any? {
    get
  }
  public var string: Swift.String? {
    get
  }
  public var boolean: Swift.Bool? {
    get
  }
  public var double: Swift.Double? {
    get
  }
  public var integer: Swift.Int? {
    get
  }
  public var date: Foundation.Date? {
    get
  }
  public var array: [Swift.String]? {
    get
  }
}
@dynamicMemberLookup public struct Fluent<Subject> {
  public let subject: Subject
  public subscript<Value>(dynamicMember keyPath: Swift.WritableKeyPath<Subject, Value>) -> ((Value) -> Fluent<Subject>) {
    get
  }
  public func set<Value>(_ keyPath: Swift.WritableKeyPath<Subject, Value>, _ value: Value) -> Fluent<Subject>
}
@dynamicMemberLookup public struct ObjectFluent<Subject> where Subject : AnyObject {
  public let subject: Subject
  public subscript<Value>(dynamicMember keyPath: Swift.ReferenceWritableKeyPath<Subject, Value>) -> ((Value) -> ObjectFluent<Subject>) {
    get
  }
  @discardableResult
  public func set<Value>(_ keyPath: Swift.ReferenceWritableKeyPath<Subject, Value>, _ value: Value) -> ObjectFluent<Subject>
  public func cauterize()
}
postfix operator +
postfix public func + <T>(lhs: T) -> Fluent<T>
postfix public func + <T>(lhs: T) -> ObjectFluent<T> where T : AnyObject
postfix operator -
postfix public func - <T>(lhs: Fluent<T>) -> T
@discardableResult
postfix public func - <T>(lhs: ObjectFluent<T>) -> T where T : AnyObject
public enum LogAntiFraud : Swift.String {
  case Failed
  case NoCard
  case WrongCardType
  case Reflective
  case Blur
  case Gray
  case PositionNotMatch
  case NeedMoreFrame
  case Pass
  case Error
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers public class IDNIDCardFlow : OCRMainFlow {
  override public func onGetPreviewData(image: UIKit.UIImage, handler: @escaping (Swift.Result<OCRResult, OCRError>) -> Swift.Void)
  override public init(ocrcard: OCRCard)
  @objc deinit
}
@_inheritsConvenienceInitializers public class IDNDriverLicenseFlow : OCRMainFlow {
  override public func onGetPreviewData(image: UIKit.UIImage, handler: @escaping (Swift.Result<OCRResult, OCRError>) -> Swift.Void)
  override public init(ocrcard: OCRCard)
  @objc deinit
}
@_inheritsConvenienceInitializers public class TWIDFlow : OCRMainFlow {
  override public func start(needConfirm: Swift.Bool, handler: ((Swift.Result<SessionInfo, OCRError>) -> Swift.Void)?)
  override public func onGetPreviewData(image: UIKit.UIImage, handler: @escaping (Swift.Result<OCRResult, OCRError>) -> Swift.Void)
  override public init(ocrcard: OCRCard)
  @objc deinit
}
public class QKMRZParser {
  public init(ocrCorrection: Swift.Bool = false)
  public func parse(mrzLines: [Swift.String]) -> QKMRZResult?
  public func parse(mrzString: Swift.String) -> QKMRZResult?
  @objc deinit
}
public struct QKMRZResult {
  public let documentType: Swift.String
  public let countryCode: Swift.String
  public let surnames: Swift.String
  public let givenNames: Swift.String
  public let documentNumber: Swift.String
  public let nationality: Swift.String
  public let birthDate: Foundation.Date?
  public let sex: Swift.String?
  public let expiryDate: Foundation.Date?
  public let personalNumber: Swift.String
  public let personalNumber2: Swift.String?
  public let isDocumentNumberValid: Swift.Bool
  public let isBirthDateValid: Swift.Bool
  public let isExpiryDateValid: Swift.Bool
  public let isPersonalNumberValid: Swift.Bool?
  public let allCheckDigitsValid: Swift.Bool
}
public struct SessionInfo {
}
public enum Facing : Swift.String, Swift.Codable {
  case front
  case back
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OCRCardType : Swift.String, Swift.Codable {
  case TWID
  case TWLicense
  case TWHealth
  case Passport
  case TWNResident
  case JPNID
  case JPNDriverLicense
  case USAID
  case USADriverLicense
  case USAVisitorVISA
  case IDNID
  case IDNDriverLicense
  public func getMaskRect(frame: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct OCRCard : Swift.Codable {
  public let facing: Facing
  public let type: OCRCardType
  public init(facing: Facing, type: OCRCardType)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum OCRError : Swift.String, Foundation.LocalizedError {
  case ERROR_NETWORK
  case ERROR_RESPONSE
  case ERROR_SYSTEM_BUSY
  case ERROR_401
  case NO_DETECTED
  case CARD_REFLECTIVE
  case LOW_SHARPNESS
  case WORNG_CARD_TYPE
  case CARD_NOT_IN_REGION
  case PROCESS_FAIL
  case ERROR_VERCIAL
  case EXPIRED
  case EngineError
  case ERROR_EVENTNAME
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol OCRFlowProtocol {
  func setDelegate(_ delegate: OCRFlowDelegate)
  func checkModel(progressHandler: ((Swift.Double) -> Swift.Void)?, handler: ((Swift.Result<Swift.Void, OCRError>) -> Swift.Void)?)
  func setPreviewSize(_ previewSize: CoreGraphics.CGSize) -> Swift.Result<Swift.Void, OCRError>
  func start(needConfirm: Swift.Bool, handler: ((Swift.Result<SessionInfo, OCRError>) -> Swift.Void)?)
  func onGetPreviewData(image: UIKit.UIImage, handler: @escaping (Swift.Result<OCRResult, OCRError>) -> Swift.Void)
  func enterBackFlow(handler: @escaping (Swift.Result<Swift.Void, OCRError>) -> Swift.Void)
  func restart()
  func recordImage(progressHandler: ((Swift.Double) -> Swift.Void)?, completion: @escaping (Swift.Result<Swift.Void, OCRError>) -> Swift.Void)
  func recordImageWithNFCResult(_ nfcResult: [Swift.String : Swift.String], progressHandler: ((Swift.Double) -> Swift.Void)?, completion: @escaping (Swift.Result<Swift.String, OCRError>) -> Swift.Void)
  func stopBarcodeDetection()
  func cancelExpired()
  func getExpiredStart() -> Foundation.TimeInterval
  func setIgnoreCard() -> Swift.Result<Swift.Void, OCRError>
}
public protocol OCRFlowAntiFraudProtocol {
  func setDelegate(_ delegate: OCRFlowDelegate)
  func checkModel(progressHandler: ((Swift.Double) -> Swift.Void)?, handler: ((Swift.Result<Swift.Void, OCRError>) -> Swift.Void)?)
  func setPreviewSize(_ previewSize: CoreGraphics.CGSize) -> Swift.Result<Swift.Void, OCRError>
  func setUIParam(imageSize: CoreGraphics.CGSize, previewSize: CoreGraphics.CGSize) -> Swift.Result<Swift.Void, OCRError>
  func setCardMatchROI(previewSize: CoreGraphics.CGSize) -> Swift.Result<Swift.Void, OCRError>
  func start(needConfirm: Swift.Bool, handler: ((Swift.Result<SessionInfo, OCRError>) -> Swift.Void)?)
  func onGetPreviewData(image: UIKit.UIImage, verticalError: ((OCRError) -> Swift.Void)?, rotateReverse: ((Swift.Bool) -> Swift.Void)?, rotateHandler: ((AntiFraudRotate) -> Swift.Void)?, handler: @escaping (Swift.Result<OCRResult, OCRError>) -> Swift.Void)
  func enterBackFlow(handler: @escaping (Swift.Result<Swift.Void, OCRError>) -> Swift.Void)
  func recordImage(progressHandler: ((Swift.Double) -> Swift.Void)?, completion: @escaping (Swift.Result<Swift.Void, OCRError>) -> Swift.Void)
  func restartOCR() -> Swift.Bool
  func enterRotate(status: AntiFraudRotate)
  func enterReverse() -> Swift.Bool
  func reenterRotate()
  func enterPrepare(active: Swift.Bool)
  func stopBarcodeDetection()
  func cancelExpired()
  func getExpiredStart() -> Foundation.TimeInterval
  func enableUploadFullFrame()
}
public class OCRFactory {
  public init()
  public func prepare(ocrcard: OCRCard) -> OCRFlowProtocol?
  public func prepareAntiFraud(ocrcard: OCRCard) -> OCRFlowAntiFraudProtocol?
  @objc deinit
}
public struct OCRFinishScanDocRequest {
}
public protocol OCRFlowDelegate : AnyObject {
  func didFailureWith(error: OCRError, retryHandler: @escaping (() -> Swift.Void))
  func notifyAntiFraudWith(status: LogAntiFraud)
}
public enum OCRNotifyMessage : Swift.String {
  case SUCCESS_SEGMENTATION
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol DebugOCRFlowDelegate : AnyObject {
  func debugMessage(channel: DebugMessageChannel, message: Swift.String)
}
public enum DebugMessageChannel {
  case text
  case value
  case fail
  public static func == (a: DebugMessageChannel, b: DebugMessageChannel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers public class LowBlurCardFlow : OCRMainFlow {
  override public func setPreviewSize(_ previewSize: CoreGraphics.CGSize) -> Swift.Result<Swift.Void, OCRError>
  override public init(ocrcard: OCRCard)
  @objc deinit
}
@_inheritsConvenienceInitializers public class JPIDCardFlow : LowBlurCardFlow {
  override public func onGetPreviewData(image: UIKit.UIImage, handler: @escaping (Swift.Result<OCRResult, OCRError>) -> Swift.Void)
  override public init(ocrcard: OCRCard)
  @objc deinit
}
@_inheritsConvenienceInitializers public class JPDriverLicenseFlow : LowBlurCardFlow {
  override public func onGetPreviewData(image: UIKit.UIImage, handler: @escaping (Swift.Result<OCRResult, OCRError>) -> Swift.Void)
  override public init(ocrcard: OCRCard)
  @objc deinit
}
public struct OCRInitScanDocRequest {
}
public protocol OCRResult {
  var fileID: Swift.String { get }
  var scanID: Swift.String { get }
  var data: [Swift.String : Swift.String] { get }
  var confirmedData: [Swift.String : Swift.String] { get }
  var frontImage: UIKit.UIImage? { get }
  var backImage: UIKit.UIImage? { get }
  var frontCropImage: UIKit.UIImage? { get }
  var backCropImage: UIKit.UIImage? { get }
  func confirmScan(complete: @escaping (Swift.Error?) -> Swift.Void)
  func orderedData() -> [(Swift.String, Swift.String)]
  func set(key: Swift.String, value: Swift.String)
}
@_hasMissingDesignatedInitializers public class OCRBaseResult<DataType> : OCRResult where DataType : Swift.RawRepresentable, DataType.RawValue == Swift.String {
  final public let data: [Swift.String : Swift.String]
  public var confirmedData: [Swift.String : Swift.String]
  final public let frontImage: UIKit.UIImage?
  final public let backImage: UIKit.UIImage?
  public var frontCropImage: UIKit.UIImage?
  public var backCropImage: UIKit.UIImage?
  final public let isAuto: Swift.Bool
  final public let fileID: Swift.String
  public var scanID: Swift.String
  public func orderedData() -> [(Swift.String, Swift.String)]
  public func get(type: DataType) -> Swift.String
  public func set(type: DataType, value: Swift.String)
  public func set(key: Swift.String, value: Swift.String)
  public func confirmScan(complete: @escaping (Swift.Error?) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MRZResult : OCRBaseResult<MRZResult.DataType> {
  public enum DataType : Swift.String, Swift.CaseIterable {
    case surname
    case givenName
    case country
    case nationality
    case dateOfBirth
    case expiryDate
    case gender
    case documentType
    case documentNumber
    case idNumber
    case placeOfBirth
    case authority
    case dateOfIssue
    case fullName
    case otherName
    public init?(rawValue: Swift.String)
    public typealias AllCases = [MRZResult.DataType]
    public typealias RawValue = Swift.String
    public static var allCases: [MRZResult.DataType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  convenience public init(data: [Swift.String : Swift.String], image: UIKit.UIImage?)
  public func setScanID(_ scanID: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TWNResidentResult : OCRBaseResult<TWNResidentResult.DataType> {
  public enum DataType : Swift.String, Swift.CaseIterable {
    case address
    case authority
    case country
    case dateOfBirth
    case dateOfIssue
    case documentNumber
    case documentType
    case expiryDate
    case fullName
    case gender
    case givenName
    case idNumber
    case middleName
    case name
    case nationality
    case otherName
    case passportNumber
    case placeOfBirth
    case surname
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TWNResidentResult.DataType]
    public typealias RawValue = Swift.String
    public static var allCases: [TWNResidentResult.DataType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  convenience public init(data: [Swift.String : Swift.String], image: UIKit.UIImage?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TWIDResult : OCRBaseResult<TWIDResult.DataType> {
  override public func get(type: TWIDResult.DataType) -> Swift.String
  public enum DataType : Swift.String, Swift.CaseIterable {
    case militaryService
    case birth
    case issueCity
    case gender
    case issueReason
    case father
    case name
    case issueDate
    case placeOfBirth
    case spouse
    case mother
    case idNumber
    case address
    case nationality
    case serialNumber
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TWIDResult.DataType]
    public typealias RawValue = Swift.String
    public static var allCases: [TWIDResult.DataType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TWLicenseResult : OCRBaseResult<TWLicenseResult.DataType> {
  override public func get(type: TWLicenseResult.DataType) -> Swift.String
  public enum DataType : Swift.String, Swift.CaseIterable {
    case name
    case condition
    case controlNo
    case gender
    case address
    case birth
    case issue
    case type
    case licenseNo
    case expiry
    case nationality
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TWLicenseResult.DataType]
    public typealias RawValue = Swift.String
    public static var allCases: [TWLicenseResult.DataType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TWHealthResult : OCRBaseResult<TWHealthResult.DataType> {
  override public func get(type: TWHealthResult.DataType) -> Swift.String
  public enum DataType : Swift.String, Swift.CaseIterable {
    case name
    case dateOfBirth
    case idNumber
    case nationality
    case documentNumber
    public init?(rawValue: Swift.String)
    public typealias AllCases = [TWHealthResult.DataType]
    public typealias RawValue = Swift.String
    public static var allCases: [TWHealthResult.DataType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class JPNIDCardResult : OCRBaseResult<JPNIDCardResult.DataType> {
  override public func get(type: JPNIDCardResult.DataType) -> Swift.String
  public enum DataType : Swift.String, Swift.CaseIterable {
    case address
    case country
    case gender
    case idNumber
    case name
    case nationality
    public init?(rawValue: Swift.String)
    public typealias AllCases = [JPNIDCardResult.DataType]
    public typealias RawValue = Swift.String
    public static var allCases: [JPNIDCardResult.DataType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class JPNDriverLicenseResult : OCRBaseResult<JPNDriverLicenseResult.DataType> {
  override public func get(type: JPNDriverLicenseResult.DataType) -> Swift.String
  public enum DataType : Swift.String, Swift.CaseIterable {
    case address
    case country
    case dateOfBirth
    case dateOfIssue
    case documentNumber
    case expiryDate
    case name
    case nationality
    public init?(rawValue: Swift.String)
    public typealias AllCases = [JPNDriverLicenseResult.DataType]
    public typealias RawValue = Swift.String
    public static var allCases: [JPNDriverLicenseResult.DataType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class USAIDCardResult : OCRBaseResult<USAIDCardResult.DataType> {
  override public func get(type: USAIDCardResult.DataType) -> Swift.String
  public enum DataType : Swift.String, Swift.CaseIterable {
    case address
    case country
    case dateOfBirth
    case dateOfIssue
    case gender
    case givenName
    case idNumber
    case middleName
    case name
    case nationality
    case region
    case surname
    public init?(rawValue: Swift.String)
    public typealias AllCases = [USAIDCardResult.DataType]
    public typealias RawValue = Swift.String
    public static var allCases: [USAIDCardResult.DataType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class USADriverLicenseResult : OCRBaseResult<USADriverLicenseResult.DataType> {
  override public func get(type: USADriverLicenseResult.DataType) -> Swift.String
  public enum DataType : Swift.String, Swift.CaseIterable {
    case address
    case country
    case dateOfBirth
    case dateOfIssue
    case documentNumber
    case gender
    case givenName
    case middleName
    case name
    case nationality
    case region
    case surname
    public init?(rawValue: Swift.String)
    public typealias AllCases = [USADriverLicenseResult.DataType]
    public typealias RawValue = Swift.String
    public static var allCases: [USADriverLicenseResult.DataType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class USAVisitorVISAResult : OCRBaseResult<USAVisitorVISAResult.DataType> {
  override public func get(type: USAVisitorVISAResult.DataType) -> Swift.String
  public enum DataType : Swift.String, Swift.CaseIterable {
    case address
    case country
    case dateOfBirth
    case expiryDate
    case givenName
    case middleName
    case name
    case surname
    public init?(rawValue: Swift.String)
    public typealias AllCases = [USAVisitorVISAResult.DataType]
    public typealias RawValue = Swift.String
    public static var allCases: [USAVisitorVISAResult.DataType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IDNIDCardResult : OCRBaseResult<IDNIDCardResult.DataType> {
  override public func get(type: IDNIDCardResult.DataType) -> Swift.String
  public enum DataType : Swift.String, Swift.CaseIterable {
    case address
    case dateOfBirth
    case dateOfIssue
    case gender
    case givenName
    case idNumber
    case middleName
    case name
    case placeOfBirth
    case surname
    public init?(rawValue: Swift.String)
    public typealias AllCases = [IDNIDCardResult.DataType]
    public typealias RawValue = Swift.String
    public static var allCases: [IDNIDCardResult.DataType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IDNDriverLicenseResult : OCRBaseResult<IDNDriverLicenseResult.DataType> {
  override public func get(type: IDNDriverLicenseResult.DataType) -> Swift.String
  public enum DataType : Swift.String, Swift.CaseIterable {
    case address
    case dateOfBirth
    case documentNumber
    case expiryDate
    case givenName
    case middleName
    case name
    case placeOfBirth
    case surname
    public init?(rawValue: Swift.String)
    public typealias AllCases = [IDNDriverLicenseResult.DataType]
    public typealias RawValue = Swift.String
    public static var allCases: [IDNDriverLicenseResult.DataType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
public enum ScanType : Swift.String, Swift.Codable {
  case TWIDFraud
  case TWID
  case TWDriverLicense
  case TWHealth
  case Passport
  case NFCPassport
  case TWNResident
  case JPNID
  case JPNDriverLicense
  case USAID
  case USADriverLicense
  case USAVisitorVISA
  case IDNID
  case IDNDriverLicense
  public func getOCRCardType() -> OCRCardType
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum JWTDecodeError : Foundation.LocalizedError, Swift.CustomDebugStringConvertible {
  case invalidBase64URL(Swift.String)
  case invalidJSON(Swift.String)
  case invalidPartCount(Swift.String, Swift.Int)
  public var localizedDescription: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
public class OCRScanDocFactory {
  public init()
  public func prepare(scanType: ScanType, eventName: Swift.String, needConfirm: Swift.Bool) -> ScanDocProtocol
  @objc deinit
}
public protocol LivenessFlowProtocol {
  func setDelegate(_ delegate: LivenessFlowDelegate)
  func checkModel(progressHandler: ((Swift.Double) -> Swift.Void)?, handler: ((Swift.Result<Swift.Void, FlowError>) -> Swift.Void)?)
  func setPreviewSize(previewSize: CoreGraphics.CGSize)
  func start(encrypt: Swift.Bool)
  func roiRect(in previewSize: CoreGraphics.CGSize) -> CoreGraphics.CGRect
  func recognize(image: UIKit.UIImage)
  func recognize(normal normalImage: UIKit.UIImage, depthImage: UIKit.UIImage)
  func getResult(completion: @escaping ((Swift.Bool) -> Swift.Void))
  func isExpired() -> Swift.Bool
  func cancelExpired()
  func enableUploadFullFrame()
}
extension LivenessFlowProtocol {
  public func recognize(normal normalImage: UIKit.UIImage, depthImage: UIKit.UIImage)
}
public class LivenessFactory {
  public init()
  public func prepare(with action: Action = .register(waitResult: true)) -> LivenessFlowProtocol
  public func preparePlayground() -> LivenessFlowProtocol
  public func prepareRecordPlayground() -> LivenessFlowProtocol
  @objc deinit
}
public enum Action {
  case register(waitResult: Swift.Bool)
  case verify(_: Swift.Bool)
}
public enum FlowError : Swift.Error {
  case checkModel
  case start
  case recognize
  case service(FlowError.Endpoint, code: Swift.String?)
  case expiredIn
  public enum Endpoint {
    case `init`
    case detect
    case verify
    public static func == (a: FlowError.Endpoint, b: FlowError.Endpoint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public protocol LivenessPlaygroundRecordFlowDelegate : LivenessFlowDelegate {
  func livenessDidNotifyMessage(message: Swift.String)
  func livenessDidUpdateReconize(result: Swift.Bool)
  func livenessDidFailureWith(error: FlowError, retryHandler: @escaping (() -> Swift.Void))
  func livenessDidRecognize(image: UIKit.UIImage)
  func livenessDidFaceScale(direction: LivenessFlow.FaceScaleDirection.Direction)
  func livenessDidProcessed(jsonString: Swift.String)
}
@_inheritsConvenienceInitializers public class OCRMainFlow : AbstractOCRFlow, OCRFlowProtocol {
  public func setDelegate(_ delegate: OCRFlowDelegate)
  public func checkModel(progressHandler: ((Swift.Double) -> Swift.Void)?, handler: ((Swift.Result<Swift.Void, OCRError>) -> Swift.Void)?)
  public func _checkModel(progressHandler: ((Swift.Double) -> Swift.Void)?, handler: ((Swift.Result<Swift.Void, OCRError>) -> Swift.Void)?)
  public func setUIParam(imageSize: CoreGraphics.CGSize, previewSize: CoreGraphics.CGSize) -> Swift.Result<Swift.Void, OCRError>
  public func setCardMatchROI(previewSize: CoreGraphics.CGSize) -> Swift.Result<Swift.Void, OCRError>
  public func setPreviewSize(_ previewSize: CoreGraphics.CGSize) -> Swift.Result<Swift.Void, OCRError>
  public func setIgnoreCard() -> Swift.Result<Swift.Void, OCRError>
  public func start(needConfirm: Swift.Bool, handler: ((Swift.Result<SessionInfo, OCRError>) -> Swift.Void)?)
  public func onGetPreviewData(image: UIKit.UIImage, handler: @escaping (Swift.Result<OCRResult, OCRError>) -> Swift.Void)
  public func enterBackFlow(handler: @escaping (Swift.Result<Swift.Void, OCRError>) -> Swift.Void)
  public func recordImage(progressHandler: ((Swift.Double) -> Swift.Void)?, completion: @escaping (Swift.Result<Swift.Void, OCRError>) -> Swift.Void)
  public func recordImageWithNFCResult(_ nfcResult: [Swift.String : Swift.String], progressHandler: ((Swift.Double) -> Swift.Void)?, completion: @escaping (Swift.Result<Swift.String, OCRError>) -> Swift.Void)
  public func stopBarcodeDetection()
  public func cancelExpired()
  public func getExpiredStart() -> Foundation.TimeInterval
  override public func restart()
  override public init(ocrcard: OCRCard)
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
public protocol LivenessPlaygroundFlowDelegate : LivenessFlowDelegate {
  func livenessDidNotifyMessage(message: Swift.String)
  func livenessDidUpdateReconize(result: Swift.Bool)
  func livenessDidFailureWith(error: FlowError, retryHandler: @escaping (() -> Swift.Void))
  func livenessDidRecognize(image: UIKit.UIImage)
  func livenessQueueDidUpload(currentCount: Swift.Int)
}
public class LivenessPlaygroundFlow {
  weak public var delegate: LivenessPlaygroundFlowDelegate?
  public init()
  @objc deinit
}
extension LivenessPlaygroundFlow : LivenessFlowProtocol {
  public func setDelegate(_ delegate: LivenessFlowDelegate)
  public func checkModel(progressHandler: ((Swift.Double) -> Swift.Void)? = nil, handler: ((Swift.Result<Swift.Void, FlowError>) -> Swift.Void)?)
  public func setPreviewSize(previewSize: CoreGraphics.CGSize)
  public func start(encrypt: Swift.Bool)
  public func recognize(image: UIKit.UIImage)
  public func roiRect(in previewSize: CoreGraphics.CGSize) -> CoreGraphics.CGRect
  public func getResult(completion: @escaping ((Swift.Bool) -> Swift.Void))
  public func isExpired() -> Swift.Bool
  public func cancelExpired()
  public func enableUploadFullFrame()
}
public enum AntiFraudRotate {
  case left
  case up
  case front
  public static func == (a: AntiFraudRotate, b: AntiFraudRotate) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RotatePoints {
  public init(leftUp: CoreGraphics.CGPoint, leftDown: CoreGraphics.CGPoint, rightUp: CoreGraphics.CGPoint, rightDown: CoreGraphics.CGPoint)
}
@_inheritsConvenienceInitializers public class TWIDAntiFraudFlow : TWIDFlow {
  public static func transformedLeftPoint(w: Swift.Float, h: Swift.Float, degree: Swift.Float, x: inout Swift.Float, y: inout Swift.Float)
  public static func transformedTopPoint(w: Swift.Float, h: Swift.Float, degree: Swift.Float, x: inout Swift.Float, y: inout Swift.Float)
  override public func checkModel(progressHandler: ((Swift.Double) -> Swift.Void)?, handler: ((Swift.Result<Swift.Void, OCRError>) -> Swift.Void)?)
  override public func setUIParam(imageSize: CoreGraphics.CGSize, previewSize: CoreGraphics.CGSize) -> Swift.Result<Swift.Void, OCRError>
  override public func setCardMatchROI(previewSize: CoreGraphics.CGSize) -> Swift.Result<Swift.Void, OCRError>
  override public func setPreviewSize(_ previewSize: CoreGraphics.CGSize) -> Swift.Result<Swift.Void, OCRError>
  override public func start(needConfirm: Swift.Bool, handler: ((Swift.Result<SessionInfo, OCRError>) -> Swift.Void)?)
  public func onGetPreviewData(image: UIKit.UIImage, verticalError: ((OCRError) -> Swift.Void)? = nil, rotateReverse: ((Swift.Bool) -> Swift.Void)? = nil, rotateHandler: ((AntiFraudRotate) -> Swift.Void)? = nil, handler: @escaping (Swift.Result<OCRResult, OCRError>) -> Swift.Void)
  override public func stopBarcodeDetection()
  public func enableUploadFullFrame()
  override public init(ocrcard: OCRCard)
  @objc deinit
}
extension TWIDAntiFraudFlow : OCRFlowAntiFraudProtocol {
  public func restartOCR() -> Swift.Bool
  public func enterRotate(status: AntiFraudRotate)
  public func enterReverse() -> Swift.Bool
  public func reenterRotate()
  public func enterPrepare(active: Swift.Bool)
}
final public class URLEncodedFormEncoder {
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    case indexInBrackets
    public static func == (a: URLEncodedFormEncoder.ArrayEncoding, b: URLEncodedFormEncoder.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: URLEncodedFormEncoder.BoolEncoding, b: URLEncodedFormEncoder.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DataEncoding {
    case deferredToData
    case base64
    case custom((Foundation.Data) throws -> Swift.String)
  }
  public enum DateEncoding {
    case deferredToDate
    case secondsSince1970
    case millisecondsSince1970
    case iso8601
    case formatted(Foundation.DateFormatter)
    case custom((Foundation.Date) throws -> Swift.String)
  }
  public enum KeyEncoding {
    case useDefaultKeys
    case convertToSnakeCase
    case convertToKebabCase
    case capitalized
    case uppercased
    case lowercased
    case custom((Swift.String) -> Swift.String)
  }
  public enum SpaceEncoding {
    case percentEscaped
    case plusReplaced
    public static func == (a: URLEncodedFormEncoder.SpaceEncoding, b: URLEncodedFormEncoder.SpaceEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Error : Swift.Error {
    case invalidRootObject(Swift.String)
  }
  final public let alphabetizeKeyValuePairs: Swift.Bool
  final public let arrayEncoding: URLEncodedFormEncoder.ArrayEncoding
  final public let boolEncoding: URLEncodedFormEncoder.BoolEncoding
  final public let dataEncoding: URLEncodedFormEncoder.DataEncoding
  final public let dateEncoding: URLEncodedFormEncoder.DateEncoding
  final public let keyEncoding: URLEncodedFormEncoder.KeyEncoding
  final public let spaceEncoding: URLEncodedFormEncoder.SpaceEncoding
  final public var allowedCharacters: Foundation.CharacterSet
  public init(alphabetizeKeyValuePairs: Swift.Bool = true, arrayEncoding: URLEncodedFormEncoder.ArrayEncoding = .brackets, boolEncoding: URLEncodedFormEncoder.BoolEncoding = .numeric, dataEncoding: URLEncodedFormEncoder.DataEncoding = .base64, dateEncoding: URLEncodedFormEncoder.DateEncoding = .deferredToDate, keyEncoding: URLEncodedFormEncoder.KeyEncoding = .useDefaultKeys, spaceEncoding: URLEncodedFormEncoder.SpaceEncoding = .percentEscaped, allowedCharacters: Foundation.CharacterSet = .afURLQueryAllowed)
  final public func encode(_ value: Swift.Encodable) throws -> Swift.String
  final public func encode(_ value: Swift.Encodable) throws -> Foundation.Data
  @objc deinit
}
extension Foundation.CharacterSet {
  public static let afURLQueryAllowed: Foundation.CharacterSet
}
@_inheritsConvenienceInitializers public class TWDriverLicenseFlow : OCRMainFlow {
  override public func onGetPreviewData(image: UIKit.UIImage, handler: @escaping (Swift.Result<OCRResult, OCRError>) -> Swift.Void)
  override public init(ocrcard: OCRCard)
  @objc deinit
}
@_inheritsConvenienceInitializers public class USIDCardFlow : LowBlurCardFlow {
  override public func onGetPreviewData(image: UIKit.UIImage, handler: @escaping (Swift.Result<OCRResult, OCRError>) -> Swift.Void)
  override public init(ocrcard: OCRCard)
  @objc deinit
}
@_inheritsConvenienceInitializers public class USDriverLicenseFlow : OCRMainFlow {
  override public func onGetPreviewData(image: UIKit.UIImage, handler: @escaping (Swift.Result<OCRResult, OCRError>) -> Swift.Void)
  override public init(ocrcard: OCRCard)
  @objc deinit
}
@_inheritsConvenienceInitializers public class USBorderCrossingFlow : LowBlurCardFlow {
  override public func onGetPreviewData(image: UIKit.UIImage, handler: @escaping (Swift.Result<OCRResult, OCRError>) -> Swift.Void)
  override public init(ocrcard: OCRCard)
  @objc deinit
}
public protocol JWT {
  var header: [Swift.String : Any] { get }
  var body: [Swift.String : Any] { get }
  var signature: Swift.String? { get }
  var string: Swift.String { get }
  var expiresAt: Foundation.Date? { get }
  var issuer: Swift.String? { get }
  var subject: Swift.String? { get }
  var audience: [Swift.String]? { get }
  var issuedAt: Foundation.Date? { get }
  var notBefore: Foundation.Date? { get }
  var identifier: Swift.String? { get }
  var expired: Swift.Bool { get }
}
extension JWT {
  public func claim(name: Swift.String) -> Claim
  public subscript(claim: Swift.String) -> Claim {
    get
  }
}
public protocol ScanDocProtocol {
  func checkModel(progressHandler: ((Swift.Double) -> Swift.Void)?, handler: ((Swift.Result<Swift.Void, OCRError>) -> Swift.Void)?)
  func prepareScan(handler: @escaping (Swift.Result<(cardType: [ScanDocCardType], info: SessionInfo, expiredIn: Foundation.TimeInterval), OCRError>) -> Swift.Void)
  func setPreviewSize(_ previewSize: CoreGraphics.CGSize)
  func start(enableUploadFullFrame: Swift.Bool?, handler: @escaping (Swift.Result<Swift.Void, OCRError>) -> Swift.Void)
  func onGetPreviewData(image: UIKit.UIImage, handler: @escaping (Swift.Result<OCRScanResult, OCRError>) -> Swift.Void)
  func onGetIDCardFraudPreviewData(image: UIKit.UIImage, handler: @escaping (Swift.Result<OCRIDCardFraudStage, OCRError>) -> Swift.Void)
  func restart() -> OCRError?
  func recordImage(progressHandler: ((Swift.Double) -> Swift.Void)?, completion: @escaping (Swift.Result<Swift.Void, OCRError>) -> Swift.Void)
  func getStatus() -> (scanDocs: [ScanDocCardType], processing: ScanDocCardType)
  func stopScan() -> OCRResult?
}
public struct OCRScanResult {
  public let originalImage: UIKit.UIImage
  public let cropImage: UIKit.UIImage
  public let context: [Swift.String : Swift.String]
}
public enum OCRIDCardFraudStage {
  case prepare
  case rotate
  case ocrscan
  public static func == (a: OCRIDCardFraudStage, b: OCRIDCardFraudStage) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ScanDocStatus {
  case idle
  case processing
  case done
  public static func == (a: ScanDocStatus, b: ScanDocStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ScanDocCardType : Swift.String, Swift.Codable {
  case TWN_IDCard_Fraud_Front
  case TWN_IDCard_Front
  case TWN_IDCard_Back
  case TWN_DriverLicense_Front
  case TWN_DriverLicense_Back
  case TWN_HealthCard_Front
  case Passport
  case NFCPassport
  case TWN_ResidentCard_Front
  case TWN_ResidentCard_Back
  case JPN_IDCARD_Front
  case JPN_DriverLicense_Front
  case USA_IDCARD_Front
  case USA_DriverLicense_Front
  case USA_VisitorVISA_FRONT
  case IDN_IDCARD_Front
  case IDN_DriverLicense_Front
  case UnknownCard
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension ScanDocCardType {
  public func getMaskRect(frame: CoreGraphics.CGRect) -> CoreGraphics.CGRect
}
@_hasMissingDesignatedInitializers public class CVMath {
  public static func transformedLeftPoint(w: Swift.Float, h: Swift.Float, degree: Swift.Float, x: inout Swift.Float, y: inout Swift.Float)
  public static func transformedTopPoint(w: Swift.Float, h: Swift.Float, degree: Swift.Float, x: inout Swift.Float, y: inout Swift.Float)
  @objc deinit
}
public class EventHelper {
  public init()
  @objc deinit
  public func stop()
  public func saveLogWith(sessionInfo: SessionInfo? = nil, info: EventInfo, preEvent: EventInfo? = nil)
  public func saveLogWithDuration(_ duration: Swift.String = "0", sessionInfo: SessionInfo? = nil, info: EventInfo)
  public func saveLog(info: EventInfo, sessionId: Swift.String = "", tenantId: Swift.String = "", customerId: Swift.String = "", preEvent: EventInfo? = nil)
}
public struct EventInfo {
  public init(eventID: Foundation.UUID = UUID(), log: Swift.String, language: Swift.String = "", description: Swift.String = "", extraInfo: Swift.String = "")
}
extension MotionCondiction : Swift.Equatable {}
extension MotionCondiction : Swift.Hashable {}
extension LogFAS.LogStage : Swift.Equatable {}
extension LogFAS.LogStage : Swift.Hashable {}
extension LogFAS.LogFASResult : Swift.Equatable {}
extension LogFAS.LogFASResult : Swift.Hashable {}
extension LogUpload.Event : Swift.Equatable {}
extension LogUpload.Event : Swift.Hashable {}
extension LivenessFlow.FaceScaleDirection.Direction : Swift.Equatable {}
extension LivenessFlow.FaceScaleDirection.Direction : Swift.Hashable {}
extension LogAntiFraud : Swift.Equatable {}
extension LogAntiFraud : Swift.Hashable {}
extension LogAntiFraud : Swift.RawRepresentable {}
extension Facing : Swift.Equatable {}
extension Facing : Swift.Hashable {}
extension Facing : Swift.RawRepresentable {}
extension OCRCardType : Swift.Equatable {}
extension OCRCardType : Swift.Hashable {}
extension OCRCardType : Swift.RawRepresentable {}
extension OCRError : Swift.Equatable {}
extension OCRError : Swift.Hashable {}
extension OCRError : Swift.RawRepresentable {}
extension OCRNotifyMessage : Swift.Equatable {}
extension OCRNotifyMessage : Swift.Hashable {}
extension OCRNotifyMessage : Swift.RawRepresentable {}
extension DebugMessageChannel : Swift.Equatable {}
extension DebugMessageChannel : Swift.Hashable {}
extension MRZResult.DataType : Swift.Equatable {}
extension MRZResult.DataType : Swift.Hashable {}
extension MRZResult.DataType : Swift.RawRepresentable {}
extension TWNResidentResult.DataType : Swift.Equatable {}
extension TWNResidentResult.DataType : Swift.Hashable {}
extension TWNResidentResult.DataType : Swift.RawRepresentable {}
extension TWIDResult.DataType : Swift.Equatable {}
extension TWIDResult.DataType : Swift.Hashable {}
extension TWIDResult.DataType : Swift.RawRepresentable {}
extension TWLicenseResult.DataType : Swift.Equatable {}
extension TWLicenseResult.DataType : Swift.Hashable {}
extension TWLicenseResult.DataType : Swift.RawRepresentable {}
extension TWHealthResult.DataType : Swift.Equatable {}
extension TWHealthResult.DataType : Swift.Hashable {}
extension TWHealthResult.DataType : Swift.RawRepresentable {}
extension JPNIDCardResult.DataType : Swift.Equatable {}
extension JPNIDCardResult.DataType : Swift.Hashable {}
extension JPNIDCardResult.DataType : Swift.RawRepresentable {}
extension JPNDriverLicenseResult.DataType : Swift.Equatable {}
extension JPNDriverLicenseResult.DataType : Swift.Hashable {}
extension JPNDriverLicenseResult.DataType : Swift.RawRepresentable {}
extension USAIDCardResult.DataType : Swift.Equatable {}
extension USAIDCardResult.DataType : Swift.Hashable {}
extension USAIDCardResult.DataType : Swift.RawRepresentable {}
extension USADriverLicenseResult.DataType : Swift.Equatable {}
extension USADriverLicenseResult.DataType : Swift.Hashable {}
extension USADriverLicenseResult.DataType : Swift.RawRepresentable {}
extension USAVisitorVISAResult.DataType : Swift.Equatable {}
extension USAVisitorVISAResult.DataType : Swift.Hashable {}
extension USAVisitorVISAResult.DataType : Swift.RawRepresentable {}
extension IDNIDCardResult.DataType : Swift.Equatable {}
extension IDNIDCardResult.DataType : Swift.Hashable {}
extension IDNIDCardResult.DataType : Swift.RawRepresentable {}
extension IDNDriverLicenseResult.DataType : Swift.Equatable {}
extension IDNDriverLicenseResult.DataType : Swift.Hashable {}
extension IDNDriverLicenseResult.DataType : Swift.RawRepresentable {}
extension ScanType : Swift.Equatable {}
extension ScanType : Swift.Hashable {}
extension ScanType : Swift.RawRepresentable {}
extension FlowError.Endpoint : Swift.Equatable {}
extension FlowError.Endpoint : Swift.Hashable {}
extension AntiFraudRotate : Swift.Equatable {}
extension AntiFraudRotate : Swift.Hashable {}
extension URLEncodedFormEncoder.ArrayEncoding : Swift.Equatable {}
extension URLEncodedFormEncoder.ArrayEncoding : Swift.Hashable {}
extension URLEncodedFormEncoder.BoolEncoding : Swift.Equatable {}
extension URLEncodedFormEncoder.BoolEncoding : Swift.Hashable {}
extension URLEncodedFormEncoder.SpaceEncoding : Swift.Equatable {}
extension URLEncodedFormEncoder.SpaceEncoding : Swift.Hashable {}
extension OCRIDCardFraudStage : Swift.Equatable {}
extension OCRIDCardFraudStage : Swift.Hashable {}
extension ScanDocStatus : Swift.Equatable {}
extension ScanDocStatus : Swift.Hashable {}
extension ScanDocCardType : Swift.Equatable {}
extension ScanDocCardType : Swift.Hashable {}
extension ScanDocCardType : Swift.RawRepresentable {}
